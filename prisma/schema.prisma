// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum SubscriptionType {
  SUBSCRIPTION
  TAX
  INSTALLMENT
  OTHER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum PaymentFrequency {
  MONTHLY
  YEARLY
  WEEKLY
  QUARTERLY
  ONE_TIME
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id        String             @id @default(cuid())
  name      String
  type      SubscriptionType
  amount    Decimal            @db.Decimal(10, 2)
  currency  String             @default("EUR")
  frequency PaymentFrequency
  startDate DateTime
  endDate   DateTime?
  status    SubscriptionStatus @default(ACTIVE)
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments  Payment[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Payment {
  id             String           @id @default(cuid())
  subscriptionId String
  subscription   Subscription     @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  amount         Decimal          @db.Decimal(10, 2)
  dueDate        DateTime
  paidDate       DateTime?
  status         PaymentStatus    @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}
